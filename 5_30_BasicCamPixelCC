#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "iostream"

using namespace cv;
using namespace std;

const int fps = 60;

std::string rgb2hex(int r, int g, int b, bool with_head)
{
    std::stringstream ss;
    if (with_head)
        ss << "#";
    ss << std::hex << (r << 16 | g << 8 | b);
    return ss.str();
}

Mat showCenters(const Mat& centers, int siz = 64) {

    Mat cent = centers.reshape(3, centers.rows);
    // make  a horizontal bar of K color patches:
    Mat draw(siz, siz * cent.rows, cent.type(), Scalar::all(0));
    for (int i = 0; i < cent.rows; i++) {
        // set the resp. ROI to that value (just fill it):
        draw(Rect(i * siz, 0, siz, siz)) = cent.at<Vec3f>(i, 0);
    }
    draw.convertTo(draw, CV_8U);

    // optional visualization:

    imshow("CENTERS", draw);
    waitKey();

    //imwrite("centers.png", draw);

    return draw;
}

int main()
{
    int x, y;
    int b, g, r;
    




    Mat frame;

    VideoCapture vid(0);

    if (!vid.isOpened())
    {

        return -1;


    }


    while (vid.read(frame))
    {

        imshow("Video", frame);


        if (waitKey(1000 / fps) >= 0)
        {
            vid >> frame;
            imshow("image", frame);
            imwrite("test.jpg", frame);
            Mat src, dst, amongUs;
            std::string image_path = samples::findFile("test.jpg");
            src = imread(image_path, IMREAD_COLOR);

            int w = 12;
            int h = 12;

            resize(src, dst, Size(w, h), INTER_LINEAR);

            resize(dst, amongUs, Size(src.size().width, src.size().height), 0, 0, INTER_NEAREST);

            std::cout << "Resolution : " << src.size().width << "x" << src.size().height;

            imshow("dst", amongUs);
            Mat data;
            amongUs.convertTo(data, CV_32F);
            data = data.reshape(1, data.total());

            // do kmeans
            Mat labels, centers;
            int k = 30;

            kmeans(data, k, labels, TermCriteria(TermCriteria::MAX_ITER, 10, 1.0), 3,
                KMEANS_PP_CENTERS, centers);

            // reshape both to a single row of Vec3f pixels:
            centers = centers.reshape(3, centers.rows);
            data = data.reshape(3, data.rows);

            // replace pixel values with their center value:
            Vec3f* p = data.ptr<Vec3f>();
            for (size_t i = 0; i < data.rows; i++) {
                int center_id = labels.at<int>(i);
                p[i] = centers.at<Vec3f>(center_id);
            }

            // back to 2d, and uchar:
            amongUs = data.reshape(3, amongUs.rows);
            amongUs.convertTo(amongUs, CV_8U);



            //visualize data:
            imshow("Final", amongUs);
            showCenters(centers);
        }

    }



    




}
