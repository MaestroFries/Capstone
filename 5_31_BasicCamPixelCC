#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iomanip>
#include <algorithm>
#include "conio.h"
#include "stdlib.h"
#include <limits>
#include <iostream>

using namespace cv;
using namespace std;




/*std::string rgb2hex(int r, int g, int b, bool with_head)
{
    std::stringstream ss;
    if (with_head)
        ss << "#";
    ss << std::hex << (r << 16 | g << 8 | b);
    return ss.str();
}*/

Mat printColours(const Mat& centers, const Mat& labels, const Mat& data, int siz = 64) {

    Mat cent = centers.reshape(3, centers.rows);

    // make  a horizontal bar of K color patches:
    Mat draw(siz, siz * cent.rows, cent.type(), Scalar::all(0));

    cout << endl << "BGR Dominance\n";
    for (int i = 0; i < cent.rows; i++) {
        // set the resp. ROI to hat value (just fill it):
        draw(Rect(i * siz, 0, siz, siz)) = cent.at<Vec3f>(i, 0);

        double numerator = static_cast<float>(countNonZero(labels == i));
        double denominator = static_cast<float>(data.total());

        double percentage = numerator / denominator;


        cout << "Cluster " << i + 1 << ": " << cent.at<Vec3f>(i, 0) << " | Pixel Count: " << countNonZero(labels == i) << " | Percentage: " << setprecision(3) << percentage * 100.0 << "% \n";

    }
    draw.convertTo(draw, CV_8U);


    imshow("Colour Palette", draw);
    //imread("ColourPalette.jpg", draw); 

    
    return draw;
}

int vidUnitTest(VideoCapture vid)
{
    if (!vid.isOpened())
    {
        return -1;
    }
    else
    {
        std::cout << "Video: PASSED";
    }
}


int main()
{
    //int x, y, b, g, r;
    const int fps = 60;
    Mat frame;
    VideoCapture vid(0);

    vidUnitTest(vid);

    while (vid.read(frame))
    {

        imshow("Video", frame);

        if (waitKey(1000 / fps) >= 0)
        {
            double e1 = getTickCount();
            vid >> frame;
            imshow("image", frame);

            imwrite("test.jpg", frame);
            
            Mat src, pixelsrc, dst; //variables for images
            std::string image_path = samples::findFile("test.jpg");
            src = imread(image_path, IMREAD_COLOR);

            //make src smaller and then increase to original size to pixelize
            int w = 12;
            int h = 12;
            resize(src, pixelsrc, Size(w, h), INTER_LINEAR);
            resize(pixelsrc, dst, Size(src.size().width, src.size().height), 0, 0, INTER_NEAREST);
            resize(pixelsrc, pixelsrc, Size(src.size().width, src.size().height), 0, 0, INTER_NEAREST);

            //std::cout << "Resolution : " << src.size().width << "x" << src.size().height;

            
            Mat data;
            dst.convertTo(data, CV_32F);
            data = data.reshape(1, data.total());   

            // do kmeans

            Mat labels, centers;
            int k = 12;

            kmeans(data, k, labels, TermCriteria(TermCriteria::MAX_ITER, 10, 1.0), 3,
                KMEANS_PP_CENTERS, centers);

            // reshape both to a single row of Vec3f pixels:
            centers = centers.reshape(3, centers.rows);
            data = data.reshape(3, data.rows);

            // replace pixel values with their center value:
            Vec3f* p = data.ptr<Vec3f>();
            for (size_t i = 0; i < data.rows; i++) {
                int center_id = labels.at<int>(i);
                p[i] = centers.at<Vec3f>(center_id);
            }

            // back to 2d, and uchar:
            dst = data.reshape(3, dst.rows);
            dst.convertTo(dst, CV_8U);

            //visualize data:
            imshow("Image after Pixelization", pixelsrc);
            imshow("Image after K-Means Clustering", dst);
            printColours(centers, labels, data);
            double e2 = getTickCount();
            double time = (e2 - e1) / getTickFrequency();
            std::cout << "\sRuntime: " << time  << "\s";
            waitKey(0);
            destroyAllWindows(); 
        }
    }
}
